{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"qa/overview/","title":"Quality Assurance Guidelines","text":"<p>Welcome to the Quality Assurance Guidelines site for QA in SAP and BTP development at Equinor! Here you will find comprehensive resources to support your testing efforts, divided into two key areas: manual testing with qTest and automation with Tricentis Tosca. Our guidelines are designed to ensure high-quality software delivery by providing you with a structured approach and best practices for testing.</p> <p>To get started, we have outlined step-by-step instructions in the \"Getting Started\" section for both manual testing with qTest and automation with Tricentis Tosca. These guides will help you set up your testing environment, understand the tools, and establish the necessary connections.</p> <p>In the manual testing section, we focus on utilizing qTest, a powerful testing management platform. </p> <p> Get started with manual testing </p> <p>Our guidelines will walk you through various aspects, such as test case creation, execution, and reporting. Additionally, we have integrated the requirements in qTest with Equinor's existing Business Process Hierarchy (BPH) system, which is currently managed in Jira. This integration ensures traceability and alignment between the testing efforts and the defined business processes.</p> <p>For automation enthusiasts, we offer comprehensive guidelines and best practices for Tricentis Tosca. </p> <p> Get started with automatic testing </p> <p>Automation plays a crucial role in streamlining testing processes, increasing efficiency, and reducing time-to-market. Our guidelines will help you create robust automation scripts, execute them effectively, and analyze the results. You'll also learn how to maintain and update your automation assets to keep pace with the evolving software landscape.</p> <p>Throughout the site, we have compiled best practices from our experienced test team at Equinor. These practices cover a wide range of topics, including test design, test data management, test environment setup, and test execution strategies. By following these guidelines, you can ensure consistent and reliable testing outcomes across projects. You find best practices for automated and manual testing.</p> <p>We have also added an overview of the testing strategy to allow you understand the different testing stages, what should the focus be, some entry and exit criteria and so on.</p> <p>We understand that questions may arise during your testing journey, and our test team is here to support you. If you have any queries or need further clarification on any aspect of the guidelines, feel free to reach out to our team. We value your feedback and are committed to continuously improving our QA practices.</p> <p>We hope this Quality Assurance Guidelines site serves as a valuable resource for your SAP and BTP development testing needs. Let's work together to deliver high-quality software solutions that meet Equinor's standards and exceed user expectations. </p> <p>Happy testing!</p>"},{"location":"qa/automation/getting-started/","title":"Getting-started","text":"<p>Here you will find what you need to get stared with test automation.</p>"},{"location":"qa/automation/getting-started/#about-tricentis-tosca","title":"About Tricentis Tosca","text":"<p>Tricentis Tosca is a set of tools for test automation, with a no-code, AI-powered approach. It features amongst others:</p> <ul> <li>Vision AI: \u201csees\u201d like a human does, enabling it to easily automate testing for applications that were previously difficult or impossible to automate;</li> <li>Model-based test automation: separates the technical information of an application with the automation model. Boosts automation rates, reduces maintenance costs, and maximizes efficiency;</li> <li>Risk-based test optimization: helps you prioritize testing for business-critical functionality, reduce overall test creation and maintenance costs, and make smarter \u201cgo/no-go\u201d release decisions;</li> <li>Service virtualization: test responses from systems that are difficult to access/provision or that have not been built yet. This removes one of the major sources of testing delays, enabling automated tests to run at any time;</li> <li>Test data management: automatically create and provision on-demand (synthetic, masked, or imported) stateful data for even the most complex scenarios;</li> <li>Distributed execution: running multiple tests in parallel across distributed infrastructures and virtual machines in order to test faster and at scale;</li> <li>API scan: simplifies API testing;</li> <li>Automation recording assistant: record their day-to-day activities that can then be converted into automated test cases;</li> <li>Dashboards: web-based reporting solution;</li> </ul> <p>The tools being used in NextGen ERP include: - Tosca Commander: creation of modules for module-based testing, test cases, executions/runs, scanning, test data; - DEX agents: distributed execution of tests; - Tosca Server: Manage access levels, authorization, send updates regarding availability of DEX agents;  </p>"},{"location":"qa/automation/getting-started/#access-to-and-installation-of-tosca-commander","title":"Access to and Installation of Tosca Commander","text":"<p>Automation Test developers will use Tosca Commander in order to write and run tests. It must be installed either in a VDI or an Equinor computer. </p> <p>The installation is done through Equinor Applications (Equinor's version of Software Center). To install Tosca Commander: - Before installing Tosca Commander the user must make a request for it on AccessIT. In AccessIT, request for \"Developer (TRICENTIS TOSCA)\";   -  - The user must be added to the developers group in Tosca Server, in the User Administration. Please contact Andr\u00e9 Brunelli or Mahesh Gore for that. - Apart of AccessIT your user must be added on Tricentis Admin Space. Please contact Mattis Furuset for that. - once access is granted open Equinor Applications and install \"Tricentis Tosca\";</p>"},{"location":"qa/automation/getting-started/#opening-project-in-commander","title":"Opening Project in Commander","text":"<p>To create a workspace\u202ffor an\u202fMS SQL Server, follow the steps below: </p> <ul> <li>On the\u202fTosca\u202fCommander\u202fstart screen, click\u202fCreate new. </li> <li>In the subsequent\u202fTosca Commander: Create new workspace\u202fwindow, select\u202fMS SQL Server, \u202ffrom the\u202fSelect type of Repository\u202fdrop-down menu.  </li> <li>Choose whether to use an existing repository or a new repository for your workspace:- </li> <li>To create a new workspace in an existing repository, enable the check box\u202fUse existing Repository. </li> <li>Connect to the database in the following ways: </li> <li>If you use MS SQL and log in to the database with your LDAP user, enter the connection string in the format\u202fServer=EAWEDWAPTSC01.sapdomain.equinor.com;Database=OperationalStore;Uid=ToscaUser1;Pwd=NxtDigitalC0re@769; </li> <li>Enter a valid connection string that contains the parameters described in the table below: </li> <li>After a standard installation,\u202fTricentis Tosca\u202fcreates new workspaces in the default directory\u202fC:\\Tosca_Projects\\Tosca_Workspaces. You can specify a different directory in the\u202fCreate new workspace in\u202ffield. </li> <li>Enter a unique name for your workspace into the\u202fSelect name for new workspace\u202ffield. </li> <li>Click\u202fOK. </li> <li>You will see a pop up window for Login, displaying \u2018Username\u2019 and \u2018Password\u2019 fields.  </li> <li>Click on \u2018Login\u2019 button </li> <li>User will be navigated to the newly created workspace   </li> </ul>"},{"location":"qa/automation/getting-started/#access-to-tosca-server-administration-console-for-admins-only","title":"Access to Tosca Server Administration Console (for Admins only)","text":"<p>Tosca Server contains a series of services to enable management of authentication, test data, DEX servers, licenses amongst others, as well as an Administration Console.</p> <p>Access to Tosca Server Administration Console is granted only through Virtual Desktop running in Equinor. Users may access through https://saptsc01.statoil.no/#/. </p> <p></p> <p>For more information regarding the setup of Tosca Server, please refer to Runbook Tricentis Tosca Server.</p>"},{"location":"qa/automation/guidelines/","title":"Tosca Guidelines","text":"<p>This page contains instructions on how to create robust automation scripts, execute them effectively, and analyze the results. You'll also learn how to maintain and update your automation assets to keep pace with the evolving software landscape.</p> <p>Best practices for test automation.</p>"},{"location":"qa/automation/guidelines/#naming-conventions","title":"Naming Conventions","text":""},{"location":"qa/automation/guidelines/#modules","title":"Modules","text":"<p>The following convention is recommended by Tricentis:</p> <ul> <li>Folder name<ul> <li>named according to transaction(s) + business description</li> <li>E.g.: ME21N | Purchase Order</li> </ul> </li> <li>Subfolder name<ul> <li>named according to containing parts</li> </ul> </li> <li>Module subname<ul> <li>Modules should be logically named for the screen each represents, or the control group on a screen if the control group appears in more than one (1) screen instance.  Where practical, modules will be grouped in folders for ease of reference. This is critical as the volume of test assets, especially modules grow, and as the team of Tosca test engineers expands.</li> <li>E.g.: Everything within the TAB \"Org. Data\"</li> </ul> </li> <li>ModuleAttribute name<ul> <li>business name of the control to be steered</li> </ul> </li> </ul> <p> <p>--</p> <p> </p>"},{"location":"qa/automation/guidelines/#test-scenarios","title":"Test Scenarios","text":"<p>Test scenarios encapsulate a functional workflow with a known outcome that is validated. A test scenario name should be a summary of its intention, i.e., summary of the actions performed by its components to steer the AUT to desired outcome.</p> <p></p>"},{"location":"qa/automation/guidelines/#folder-structure-of-project-workspace-in-tosca","title":"Folder structure of Project workspace in Tosca","text":""},{"location":"qa/automation/guidelines/#project-structure","title":"Project Structure","text":""},{"location":"qa/automation/guidelines/#requirement-structure","title":"Requirement Structure","text":"<p>The requirement structure should be replicated from the qtest BPML hierarchy.</p> <p></p>"},{"location":"qa/automation/guidelines/#module-structure","title":"Module Structure","text":"<p>Standard Modules for SAP GUI and Fiori applications.</p> <p></p> <p>Standard Modules under Sap folder can be used for automation of SAP GUI application. Eg: SAP Menu, SAP Logon etc.</p> <p></p> <p>In Tosca commander 16.0 onwards standard modules also have fiori modules which can be used for fiori application automation. Eg: SAP Tile and SAP WaitForBusyIndicator.</p> <p></p>"},{"location":"qa/automation/guidelines/#test-case-structure","title":"Test Case Structure","text":""},{"location":"qa/automation/guidelines/#execution-list-structure","title":"Execution List Structure","text":""},{"location":"qa/automation/tosca-best-practices/","title":"Tricentis Tosca Commander Best Practices","text":"<p>This guideline will be gradually built as we advance on the use of tools. For suggestions and improvements please contact acbr@equinor.com.</p>"},{"location":"qa/automation/tosca-best-practices/#creation-of-modules","title":"Creation of Modules","text":""},{"location":"qa/automation/tosca-best-practices/#create-modules-for-sections-of-pages","title":"Create modules for sections of pages","text":"<p>A Module is created for each functional unit of the object to be tested. These functional units can be, for instance, whole websites in a browser (what can be seen on one screen), or only specific parts of the screen. If the whole UI has a high number of elements, the Attributes should be split into different Modules, e.g. one for the title bar, navigation tree and content section. If the whole screen only includes a smaller number of elements, the whole page can also be used as a Module. </p> <p></p> <p>Benefits:</p> <ul> <li>modules with a low number of Attributes are easier to read and to maintain</li> <li>By creating modules for a part of an application that is reused on multiple pages (for intance a menu bar), you must only create one Module for this which you can reuse.</li> </ul>"},{"location":"qa/automation/tosca-best-practices/#avoid-duplicate-modules","title":"Avoid duplicate Modules","text":"<p>Field on a screen should be covered only once in a Module. Duplicate Modules (representing the same control) should be avoided. Additionally, a control should only appear in one Module as a ModuleAttribute. If you have any duplicate modules you can search with the help of Find duplicate modules option from menu section and merge it by selecting the controls.</p> <p></p> <p>Benefits:</p> <ul> <li>Duplicate Modules lead to additional maintenance effort. By only having every element once, you can reduce that effort significantly.</li> </ul>"},{"location":"qa/automation/tosca-best-practices/#rename-modules-appropriately-after-creation","title":"Rename Modules appropriately after creation","text":"<p>When you create a Module with Tbox XScan, the Module name is created automatically using the window caption. This will not always reflect the true purpose of the Module. You must rename the module. When naming the Module, include the application and section name. This simplifies identifying the Module when using \u201cfuzzy\u201d search.</p> <p>Use as: <code>*\\&lt;T-code\\&gt;* | *\\&lt;Screen-name\\&gt;* | *\\&lt;Tab-name\\&gt;* | *\\&lt;Screen description\\&gt;*</code></p> <p></p> <p>Benefits:</p> <ul> <li>giving Modules a proper name makes it easier to find them.</li> <li>it is also done for the sake of maintaining clarity and identification, particularly for all other testers and experts working on the project.</li> </ul>"},{"location":"qa/automation/tosca-best-practices/#add-more-than-one-moduleattribute-to-modules","title":"Add more than one ModuleAttribute to Modules","text":"<p>When you have Modules that contain all the ModuleAttributes of a section of the screen, you can create more readable and maintainable test cases. If you create Modules with only one ModuleAttribute, many Modules will be needed to steer your SUT. This increases the number of TestSteps and make test cases difficult to read.</p> <p></p> <p>Benefits:</p> <ul> <li>more ModuleAttributes within one Module reduces the number of Modules and TestSteps</li> <li>makes your portfolio and your TestCases easily readable and maintainable</li> </ul>"},{"location":"qa/automation/tosca-best-practices/#avoid-using-index-for-moduleattribute-identifcation","title":"Avoid using Index for ModuleAttribute identifcation","text":"<p>Avoid Identifying a control by Index as minor changes in the SUT can lead to failed test cases. Instead, controls should be identified by properties or anchors. Use index only if you cannot choose other identification criteria to uniquely identify the control.</p> <p></p>"},{"location":"qa/automation/tosca-best-practices/#avoid-using-image-based-identification","title":"Avoid using image-based identification","text":"<p>Image-based recognition should only be used as a last resource, as image-based automation is dependent on screen resolution, consistent appearance and non-variability of the control contents. Use it when there is no other option to steer the controls, mainly useful to steer the Maps.</p> <p></p> <p>Benefits:</p> <ul> <li>test cases are more stable</li> <li>easier to maintain</li> <li>more readable </li> <li>can be used for distributed execution.</li> </ul>"},{"location":"qa/automation/tosca-best-practices/#combine-module-attributes-in-control-groups-if-possible","title":"Combine Module Attributes in control groups, if possible","text":"<p>Modules should be logically named for the screen each represents, or the control group on a screen if the control group appears in more than one screen instance.</p> <p></p> <p>Benefits:</p> <ul> <li>reduces errors</li> <li>increases readability</li> </ul>"},{"location":"qa/automation/tosca-best-practices/#name-moduleattributes-appropriately","title":"Name ModuleAttributes appropriately","text":"<p>Module Attributes should be named after the definition of the field on the screen. The Module Attribute\u2019s name should be in a readable form and not just a technical definition.</p> <p></p> <p>Benefits:</p> <ul> <li>Business-related names will help to identify the correct control in the Test Step</li> <li>Makes them easy to understand for business users.</li> </ul>"},{"location":"qa/automation/tosca-best-practices/#make-use-of-cardinality","title":"Make use of cardinality","text":"<p>When using a ModuleAttribute more than once in a TestStep, consider using the cardinality parameter. Cardinality allows you to use the same ModuleAttribute multiple times within a TestStep without having to copy it. Default cardinality is set to \u201c0-1\u201d. For multiple use, it must be set to \u201c0-n\u201d.</p> <p></p> <p>Benefits:</p> <p>Using cardinality increases readability and simplifies maintenance.</p>"},{"location":"qa/automation/tosca-best-practices/#use-standard-modules-wherever-required","title":"Use standard modules wherever required","text":"<p>Use standard modules wherever required. Standard modules will get imported by default while creating the workspace and this will avoid creating extra modules. We can use the standard modules like openurl to access the application and to close the application use TBox window operation module etc. which are available in the standard modules.</p> <p>Benefits:</p> <p>Using standard modules will avoid creating extra modules, making maintenance easier.</p>"},{"location":"qa/automation/tosca-best-practices/#use-parameters","title":"Use parameters","text":"<p>Both XModules and XModuleAttributes are defined by their default properties. In addition, they are also defined by using specific parameters. These params are relevant since they have an impact on the system's interaction with controls.  These configurations are created in the Properties tab. In Tosca we have Configuration, Identification, Steering and Transition parameters. The parameters used most are ScrollingBehaviour, WaitBefore, WaitAfter, ExplicitName, AvoidSnapper.</p> <p></p> <p>Benefits:</p> <p>These parameters define which TBox components are used for steering controls and to specify the behaviour of a control.</p>"},{"location":"qa/automation/tosca-best-practices/#structuring-test-cases","title":"Structuring Test Cases","text":""},{"location":"qa/automation/tosca-best-practices/#test-case-folder-structure","title":"Test Case Folder Structure","text":"<p>Within a Test case, use folders to separate logical sections. We recommend the following structure: Precondition for starting the SUT and preparing test data; Process for the actual test, and Postcondition to perform clean-ups and close the SUT. Within those folders, a folder structure should be used to group test steps.</p> <p>Keep the specific process test steps in a folder ex: Login process; we enter the credentials and press the login button, then verify the user logged in. Keep this in a folder so that it will be easy to identify.</p> <p></p> <p>Benefits:</p> <p>When using this folder structure, the content is separated and easily readable, even when expanded. Also, it is easier to focus on the separate parts of the process.</p>"},{"location":"qa/automation/tosca-best-practices/#test-case-verification-points","title":"Test Case Verification Points","text":"<p>Every test case should have at least one verification point. This ensures that the functions of your SUT are verified to work, otherwise your test case would not have a defined outcome.</p> <p></p> <p>Benefits:</p> <p>With a \"Verify\" value, you can ensure that the system under test is behaving as expected. Every test case needs a verification point, but Business test cases which may be used to perform actions that are needed for a subsequent test case might not need one. Make sure to therefore add verification points to test cases only where required.</p> <p>Note: By adding verification points, Tosca will capture the Screenshots of the verification if we have enabled the DOKU Snapper in settings.</p>"},{"location":"qa/automation/tosca-best-practices/#test-case-workstates","title":"Test Case Workstates","text":"<p>Setting Workstates on test cases provide a good overview on the test case status. They help with the overview of the Requirements section. Each Workstate translates to a specific percentage of completion to the work of that section (i.e. PLANNED gives 20%, INWORK gives 50% and COMPLETED means 100%). This provides a good overview of the status of test cases, as well as which Requirements have been covered.</p> <p></p> <p>Benefits:</p> <ul> <li>Workstates make it easier to see the status of a test case in the test cases section and in the Requirements section, and makes it easy to check the state of the test case.</li> <li>By renaming test steps and Modules even a person not involved in the test case creation will be able to more easily understand the process being validated.</li> </ul>"},{"location":"qa/automation/tosca-best-practices/#synchronization","title":"Synchronization","text":"<p>During execution, Tosca and the AUT often require synchronization. Static waits using the Tbox Wait Module should be avoided. Instead, use the ActionMode \u201cWaitOn\u201d. WaitOn ensures that test execution is not prolonged unnecessarily, which impacts execution performance.</p> <p>Note: By default, the synchronization for WaitOn will be 20000ms. This can be modified if needed. It\u2019s often best to increase the time so that the test case is not erroneously failed.</p> <p>Note: We can also use the Steering parameters of wait: 1. WaitBefore 2. WaitAfter.  This also help steer the application, even though it is static wait.</p> <p></p>"},{"location":"qa/automation/tosca-best-practices/#avoid-keyboard-and-mouse-emulsion","title":"Avoid keyboard and mouse emulsion","text":"<p>The <code>{SENDKEYS}</code> and <code>{CLICK}</code> commands should be avoided whenever possible. These commands emulate keyboard or mouse movements and are slow, less stable and can have a negative impact on unattended execution.  Instead, use \u201cx\u201d to execute the click event directly on the control or use direct steering in text boxes.</p> <p></p> <p>Benefits:</p> <p>Avoiding keyboard and mouse emulation increases speed and stability, and facilitates remote execution.  Direct steering can be also used if a computer is locked.</p>"},{"location":"qa/automation/tosca-best-practices/#test-case-names","title":"Test case names","text":"<p>Each test case should have a unique name within a project or component folder. Use the same name in the test design sheet to avoid confusion.</p> <p></p> <p>Benefits:</p> <p>Unique test case names increase readability, make searches easier and make reports more readable.</p>"},{"location":"qa/automation/tosca-best-practices/#make-use-of-recovery-scenarios","title":"Make use of recovery scenarios","text":"<p>Recovery scenarios help you with unexpected occurrences errors/issues while running test cases. Sometimes unexpected screens/popups etc. can make a test case fail. Creating Recovery Scenarios will help to deal with unexpected occurrences and then restart either the Test Case, TestStep or the TestStepValue after recovering to a SUT known state.</p> <p>Note: you must previously anticipate an unexpected occurrence such as a screen/popup because Tosca must be instructed on how to deal with the situation should it arise. This is when Recovery Scenarios come into play. </p> <p>Note: Recovery scenarios only work when executing test cases in an Execution List.</p> <p></p> <p>Benefit:</p> <p>Recovery scenarios ensure that your test cases do not encounter an error which may stop your entire Test Set from running due to unexpected issues like popups, cookie notifications, or other unexpected conditions.</p>"},{"location":"qa/automation/tosca-best-practices/#implement-clean-up-scenarios","title":"Implement clean-up scenarios","text":"<p>Clean-up scenarios will help you to reset your SUT to a known state when a test case fails. They ensure that you can run subsequent test cases. Without the, it can be problematic to run multiple test cases in a row.  Clean-up scenarios ensure that you can get back to the base state for the next test case by \u2018cleaning up\u2019 after an unexpected condition. </p> <p>Note: Clean-up scenarios only work when executing test cases in an Execution List.</p> <p></p> <p>Benefits:</p> <p>Clean-up scenarios help you to make sure that when a test case fails you can start the next one without any manual intervention. This is especially necessary for unattended execution wherein we need to ensure that a failure of 1 test case does not affect the remaining test cases.</p>"},{"location":"qa/automation/tosca-best-practices/#recovery-scenario-retry-level","title":"Recovery Scenario Retry Level","text":"<p>Make sure that your Recovery scenarios restart on the correct RetryLevel. By default, it will be on the test case level which means that after the Recovery scenario the entire test case will restart. This is not always what you want or is not even always possible. Setting the correct RetryLevel will ensure that the test case does not run into other issues.</p> <p></p> <p>Benefits:</p> <p>If a test case restarts on the correct level, it is possible to run your test cases correctly even when faced with unexpected issues.</p>"},{"location":"qa/automation/tosca-best-practices/#create-test-step-blocks-based-on-reusability","title":"Create Test Step Blocks Based on Reusability","text":"<p>Make use of Reusable TestStepBlocks when creating new test cases. </p> <p>Note: Reusable TestStepBlocks should only be created if they are intended to be reused, as they would otherwise clutter the repository.</p> <p>Benefits:</p> <p>Reusable TestStepBlocks help to save time and effort as created reusable blocks can be easily re-used in the entire project.</p>"},{"location":"qa/automation/tosca-best-practices/#test-configuration-parameters","title":"Test Configuration Parameters","text":"<p>Use Test Configuration Parameters to set overall variables, such as setting a web browser URL. This is done so that everybody working on the project uses the same variables when testing the same test cases. Values that change between test cases should be part of the TestSheet.</p> <p>Note: The syntax to use the Test configuration parameters is <code>{CP[test configuration parameter name]}</code></p> <p></p> <p>Benefits:</p> <p>Using Test Configuration Parameters ensures that values can be managed from a centralized point, rather than changing them in each step, creating higher maintenance. This method ensures that everyone working on the project is using the same variables for test scripts.</p>"},{"location":"qa/automation/tosca-best-practices/#execution-lists-logs-and-scratch-book","title":"Execution Lists -Logs and scratch Book","text":"<p>Every test case that is ready to execute needs to be in an Execution List. Execution Lists will generate logs during execution of test cases and makes it possible to run multiple test cases in a row without manual intervention. </p> <p>During test case development/creation, test cases can be debugged in Scratchbook. Once completed, drag the into an Execution List for execution.</p> <p></p> <p>Benefits:</p> <p>When test cases are run in a Execution List, the history of prior runs is available, allowing for recovery and clean-up scenarios to be kicked in.</p>"},{"location":"qa/automation/tosca-best-practices/#multi-user-workspaces","title":"Multi-User Workspaces","text":""},{"location":"qa/automation/tosca-best-practices/#separate-login-credentials-for-each-user","title":"Separate Login Credentials for Each User","text":"<p>When you work together in a repository it is wise to create login credentials for everyone separately, so you do not get access conflicts even if there are enough licenses. It will also help you to see who has something checked out or who adjusted something last.  </p> <p></p> <p>Benefits:</p> <p>Separate login credentials in a common repository reduce access conflicts and you can ask someone to check something in when you need it. Also, you can see who updated an artifact.</p>"},{"location":"qa/automation/tosca-best-practices/#separate-regular-users-and-administrators-in-a-common-repository","title":"Separate regular users and administrators in a common repository","text":"<p>By separating the kind of users, you can make sure that the right people are able to set access rights, add users, disable users and create or delete user groups. With these rights you can decide who is able to see what and/or can adjust something. It is important to not only have one administrator but also to not make everyone an administrator.</p> <p></p> <p></p> <p>Benefits:</p> <p>Separating users will help you to set correct rights for users and make sure that it is not possible for everyone to do this.</p>"},{"location":"qa/automation/tosca-best-practices/#use-a-buffer-only-within-one-test-case","title":"Use a buffer only within one test case","text":"<p>Setting, adjusting and using a buffer within one Test Case ensures that data is not used from different Test Cases. Buffers are set on the device where you run the Test Case on. Therefore, using a buffer that was set on a previous Test Case might create potential problems as this is not set on the machine executing your current Test Case. There might also be a problem with old data, if the Test Case has not been run in a while. By setting, adjusting and using the buffer only in one Test Case you make sure that the data is always up to date and the buffer is always created and available.</p> <p>Tbox Delete Buffer can be used to delete a buffer and the value associated with the buffer.</p> <p></p> <p>Benefits:</p> <p>Using a buffer only within one Test Case ensures that you are using data that is up to date and not from another Test Case. </p>"},{"location":"qa/automation/tosca-best-practices/#store-shared-settings-in-the-project-settings","title":"Store shared settings in the project settings","text":"<p>Using project settings instead of workspace settings ensures that everyone (including Agents) has the same settings. This eliminates problems that could stem from different synchronization times, different extension locations, or other settings. These settings are saved in the common repository, so everybody is up to date as soon as they press the update all button.</p> <p></p> <p>Benefits:</p> <p>Storing shared settings in the project settings makes sure that everyone is using the same settings, thus eliminating different sources of errors.</p>"},{"location":"qa/automation/tosca-best-practices/#useful-links","title":"Useful Links","text":"<ul> <li>Keyboard Shortcuts</li> </ul>"},{"location":"qa/manual/getting-started/","title":"Getting-started","text":"<p> <p>Go to qTest   </p> <p>Continue to the training videos</p> <p></p>"},{"location":"qa/manual/getting-started/#getting-access-to-qtest","title":"Getting access to qTest","text":"<ol> <li>Go to Equinor Access IT website (https://accessit.equinor.com) and search for qTest.</li> <li>Select appropriate role and add it to cart (to develop test cases chose Test Developer).</li> <li>As soon as your access is granted you will receive e-mail confirmation. You can access qTest via SSO long (credentials are not required).</li> <li>Log in to qTest through https://equinor.qtestnet.com</li> </ol> <p>Note</p> <p>When access is approved and you have logged in for the first time, reach out to your QA SME if you need to edit test cases. </p> <p>The QA SME will provide you with the correct role in qTest.</p> <p>External hire need to log into AccesIT via Citrix: https://connectit.equinor.com</p>"},{"location":"qa/manual/getting-started/#installation-qtest-explorer","title":"Installation qTest Explorer","text":""},{"location":"qa/manual/getting-started/#equinor-environment","title":"Equinor environment","text":"<ol> <li>Open Equinor Applications.</li> <li>Install Chrome and qTestExplorer.</li> </ol>"},{"location":"qa/manual/getting-started/#non-equinor-alternative","title":"Non-Equinor Alternative","text":"<ol> <li>Go to https://equinor.qtestnet.com/p/120469/portal/project#tab=resource and follow the installation procedure.</li> <li>Download the latest version of Desktop Explorer 7.2.8.6 and save it on your desktop.</li> <li>Run the qTestExplorer.exe file to start the installation process.</li> </ol> <p>Tip</p> <p>First time login to qTest Explorer: Log in to qTest and execute a test run (TestPad + Desktop Explorer). </p>"},{"location":"qa/manual/getting-started/#installing-qtest-plugins","title":"Installing qTest plugins","text":"<ol> <li>Go to your Chrome browser to install the qTest Integration Browser extention so that you can open desktop explorer from your test anf to link Jira through your tests.</li> <li>In your Chrome browser click on the three dots in your right corner - Extensions - Visit Chrome Web Store.  </li> <li>In the Chrome Web Store serach for qTest and add all three extensions to Chrome.  </li> <li>You should now be able to see the extensions in your browser.</li> </ol>"},{"location":"qa/manual/getting-started/#additional-material","title":"Additional material:","text":"<p> <p>Tricentis documentation</p> Dette er et innebygd Microsoft Office-dokument. Leveres av Office. <p></p>"},{"location":"qa/manual/guidelines/","title":"qTest Guideline","text":""},{"location":"qa/manual/guidelines/#creating-a-jira-user-story-in-accordance-to-qtest","title":"Creating a Jira User Story In Accordance to qTest","text":"<p>When creating an User Story (US) in Jira some fields must be configured in order to prepare it to be used later in qTest. </p> <ul> <li>Project: NextGen (NGE)</li> <li>Issue Type: Story</li> <li>Story Type: only Configuration and Development types should be considered for testing as a general rule. As Spike US's deliver knowledge and Enabler US's deliver value to a user or the outcome of a sprint they are not expected to result in verifiable software changes.</li> <li>Linked Issues: choose <code>Implements</code> and find the requirement you are testing against.</li> <li>Charm ID: find the 10-digits Charm ID you are testing against on Solution Manager.</li> <li>Functional Test Required: <code>Yes</code>. Be selective on which user stories are being marked with <code>Yes</code>. The following should be avoided:</li> <li>Enabler US's;</li> <li>User Stories that will not have test case developed in the current sprint. Create another US linked to the current one where the test cases will be developed;</li> <li>User Stories with only unit testing;</li> </ul> <p>You can see the chosen details on the new User Story. Notice also that there are two subtasks, one for creating and another for executing test cases related to this US. </p> <p></p>"},{"location":"qa/manual/guidelines/#creating-a-test-case","title":"Creating a Test Case","text":"<p>You find qTest here. Use the Equinor ID to perform login.</p> <p></p> <p>At the left side you can select the project to work on. Please choose \"Equinor SAP - BPML\".</p> <p>Once logged in you have four main tabs on top of the portal:</p> <ul> <li>Test Plan: Not relevant for test developers. Reserved for PO's and QA SME's</li> <li>Requirements: where we create new test cases based on requirements</li> <li>Test Design: add properties and details to test cases</li> <li>Test Execution: List of created test runs</li> </ul> <p></p> <p>We then open <code>Requirements</code> tab to start a new test case. In this page it is worth noticing: 1. the BPML structure with the requirements added to Jira 2. test cases already linked to the selected requirement 3. area to create a new test case</p> <p></p> <p>Once the new test case is created it is added to the test cases area. </p> <p></p> <p>By clicking on the new test case you are transferred to the <code>Test Design</code> tab. This is where we write a test case. It has two main parts:</p> <ol> <li>Properties: the following may be configured.</li> <li>Status: starts as <code>New</code>.</li> <li>Type: manual, automation, security.</li> <li>Owner (component/team): the team responsible for this test case.</li> <li>Assigned To: test developer (or Product Owner when under approval).</li> <li>Automation Priority: low/medium/high.</li> <li>Automation Status: not started/in progress/completed.</li> <li>Version: automatically set up and updated. Round numbers indicate versions available for production.</li> <li>Test Steps: a test case must contain steps where the tester performs actions against the SUT. For each step:</li> <li>Step #: automatically generated</li> <li>Step Description: description of the action conducted by the tester. Here the test developer should use parameters from qTest Manager | Parameters instead of writing static values to parameters</li> <li>Expected result: short description of the expected behavior of the SUT</li> <li>End-user role: SAP role </li> <li>Executable: script executed during step</li> <li>Attachment (paper clip icon)</li> <li>Action: control actions to be performed in the step such as moving it up or down in the test case</li> <li>The test case under the BPML structure. Notice that the icon has only orange details. This means that it's last <code>Status</code> is not approved.</li> </ol> <p>Other tabs besides Test Steps include Requirements, Sessions, Attachments, History and Comments.</p> <p></p> <p>When working on a test case, a test case developer should: - set <code>Assigned To</code> to himself; - set <code>Status</code> to <code>in progress</code>; - choose <code>Type</code>, <code>Owner</code>, <code>Automation Priority</code> and <code>Automation Status</code> (the two last ones only for automation); - add a description of the test case; - add test steps. Remember to use add parameters by using <code>@&lt;parameter name&gt;</code>. Once you type <code>@</code> and any letter you should see the available parameters. - once the test case is ready to be reviewed:   - change <code>Status</code> to <code>Ready for Approval</code>   - change <code>Assigned to</code> for the quality SME responsible for your team   - click <code>Save</code></p> <p>The <code>Version</code> is automatically updated with one number after the decimal up. IF the quality SME approves the test case the <code>Version</code> is rounded up to the next full number (e.g. if <code>Version</code> is 0.3 and the quality SME approves it, <code>Version</code> becomes 1.0). Also the icon for the test case now has one green check, indicating that its last status is approved.</p> <p></p>"},{"location":"qa/manual/guidelines/#creating-a-test-case-from-a-session","title":"Creating a Test Case from a Session","text":"<p>This alternative to create a test case allows the test case developer to run a session on qTestExplorer Integrated, record the usage of the tool to be tested just like in the expected test case, and then generate a test case from it, with test steps and annexed screenshots.</p> <p>To start a new session, find the icon for qTest Explorer in your applications tray and click on it.</p> <ul> <li>if you must install qTest Explorer yet, refer to the installation of qTest Explorer.</li> </ul> <p></p> <p>NOTE: if your qTest Explorer logo is shown in gray color it means it has not logged in yet. The easiest way to log in is to find a test case in qTest under Test Execution and run with Desktop Explorer. Once the Desktop Explorer opens you may cancel the run and try with the button on the applications tray again.</p> <p></p> <p>Once qTest Explorer pane opens, update the following fields:</p> <ul> <li>Project: use \"NextGen ERP\".</li> <li>Title: add a title using the naming convention in qTest Best Practices.</li> <li>Applications: choose the applications you intend to test.</li> </ul> <p>Click on Start. The current pane closes and a smaller one with the execution time is displayed. Remember that the control buttons appear only when you hover the mouse over the timer.</p> <p>For each step in your execution ideally it should be added a note in order to be easier to understand the step later on. This is to avoid having steps where the description only says unclear descriptions, such as \"click here\".</p> <p></p> <p>Use the applications as you need for your scenario. Once you are done, click on the Stop button in the pane. Another pane opens asking you to either accept the execution or edit it. Choose Edit, qTest then shows a list with the recorded actions. You can eventually add better descriptions and remove unnecessary steps.</p> <p></p> <p>Once you are finished, click on the button on top right corner to save the session.</p> <p></p> <p>The browser then opens with the same list of steps. Click on \"Submit Test Case\".</p> <p></p> <p>You are presented a preview of the test case. You can either group all actions of a screen as a single step or have them as separate steps. This is optional. Finally, click on Submit.</p> <p></p> <p>A new test case is created under no specific BPML in the hierarchy. </p> <p></p> <p>After the test case is created, remember to do the following yet:</p> <ul> <li>Drag it to the correct BPML. </li> <li>Go under the Requirements tab and add the correct requirement.</li> <li>Add Expected Result, End User Role and Executable for each step.</li> <li>change Status and Assigned To accordingly.</li> <li>if you are running the session already on the Quality environment and you need to run the test case only once (you don't have multiple variations of the test case with different parameter values or datasets) you may mark the subtest \"Execute Test Cases\" to Done.</li> </ul>"},{"location":"qa/manual/guidelines/#creating-runs","title":"Creating Runs","text":"<p>You may create a new test run from the Test Design view by cliding on <code>Create Test Run</code>. A pop-up opens and you should then choose the test suite where the test run will be created. If you cannot find a suitable test suite for the test case click on <code>Test Execution</code>, find the test cycle where you expect the test suite to be, right-click on it and choose <code>Create Test Suite</code>.</p> <p></p> <p>After choosing the test suite a new pop-up is displayed, where you can create several test runs for this test case. The following fields are relevant: - <code>Create Run Data</code>:    - <code>Manually</code>: the test developer adds values from drop-down menus for each configured parameter   - <code>Randomize Data</code>: qTest will pick available parameter values randomly   - <code>From Dataset</code>: uses a pre-added dataset as source - Assign parameter values to each Test Run: add as many test runs as necessary for each test case and vary the parameter values to create coverage for your tests</p> <p></p> <p>Once created the new test runs will be visible under Test Execution.</p> <p></p>"},{"location":"qa/manual/guidelines/#executing-test-runs","title":"Executing Test Runs","text":"<p>To execute a test run click on <code>Run -&gt; Testpad + Desktop Explorer</code>.</p> <p></p> <p>Two pop-up windows appear. The first one contains the test steps from the chosen test case. The tester can use it to update the progress of a test run, and mark test runs as success or failure. </p> <p>The second pop-up is the <code>start session</code> screen for qTest Desktop Explorer. The user can select which applications are being recorded during the test execution (use <code>desktop</code> if you are taking action on not only SAP but Fiori or another application during the test execution) and the record mode (with <code>Auto</code> qTest takes screenshots automatically; <code>Manual</code> for cases where the tester will decide when to take screenshots; <code>Time Interval</code> and qTest takes screenshots at predefined intervals). </p> <p></p> <p>In <code>Start Session</code> after clicking on <code>Start</code> the test run starts and another pane is shown. This pane contains a timer for the running test and some buttons for actions:</p> <ul> <li>stop test</li> <li>force screenshot: can be used even in tests marked with record mode <code>Auto</code></li> <li>media: record audio or videos during a test run</li> <li>notes: useful to take notes during a test execution in case some important information should be available at a specific test case execution</li> <li>show/switch time type: not relevant</li> <li>pause test: if during a test execution the tester must use the computer for something else e.g. read emails he can pause the test, do other actions and after he is done resume execution</li> </ul> <p></p> <p>Testers should update the status of each test step as they execute a test run.</p> <p></p> <p>After the tester clicks on <code>stop test</code> he is prompted whether to complete session or edit session. We recommend editing the session right after running it so that the tester goes through all recorded actions and screenshots and deletes the ones he deems unnecessary. </p> <p>Once done the tester should click on <code>Complete Session</code> (top-right corner). In the test steps pane the tester will set status for the test run and save. This in time will update the status of the test run under <code>Test Execution</code>. </p>"},{"location":"qa/manual/guidelines/#reporting-defects","title":"Reporting Defects","text":"<p>In the case of a test case run that results in a defect being found the tester must report it. The easiest way to do it is from the test steps pane, where he clicks on the defect button on the step where he noticed it.</p> <p></p> <p>He should select the choices <code>include all test step details</code> and <code>include test execution details in defect's comments</code>, then click on <code>new</code> and <code>add</code>. The tester is then redirected to Jira where he must create a new <code>Defect</code> issue.</p> <p>Notice in the <code>Description</code> field that the test steps have been added here. The tester should add comments at this point under the step where the defect has been discovered to describe what was found. It is recommended to use \"expected\" and \"result\" format to describe the finding.</p> <p>The following fields must be filled up in the Jira defect:</p> <ul> <li>Linked issues: <code>blocks</code> and the requirement the test case is linked to</li> <li>Defect Category (mandatory)</li> </ul> <p>After saving the defect, the requirement it has been linked to will have a reference to the defect.</p> <p>The two subtasks which had been created when creating the User Story can be updated. The one for creating a test case can be set to <code>Done</code>. The one for executing the test case will depend on the result of the test case execution. Test cases with pending defects should not be marked as <code>Done</code>, but can rather be changed to <code>Realize</code>, which means that it is in progress.</p>"},{"location":"qa/manual/qtest-best-practices/","title":"qTest Best Practices","text":""},{"location":"qa/manual/qtest-best-practices/#qtest-parameters","title":"qTest Parameters","text":"<p>To open qTest qTest Manager | Parameters you may also click on a parameter being used in a test case. You are redirected to the Parameters page.</p> <p></p> <p>Each parameter may have several values. Test Cases should not have static parameters written into them, but rather refer to qTest Parameters as it greatly reduces maintenance effort. </p>"},{"location":"qa/manual/qtest-best-practices/#test-case-naming-convention","title":"Test Case Naming Convention","text":"<p>Please use the following naming convention for test cases:</p> <p></p>"},{"location":"qa/manual/qtest-training-session/","title":"qTest Training Session Video","text":""},{"location":"qa/manual/qtest-training-session/#qtest-training-videos-for-testers","title":"qTest Training Videos - For Testers","text":""},{"location":"qa/manual/qtest-training-session/#intro","title":"Intro","text":""},{"location":"qa/manual/qtest-training-session/#what-happens-when-a-test-case-is-assigned-to-you","title":"What happens when a test case is assigned to you","text":""},{"location":"qa/manual/qtest-training-session/#how-to-run-a-test-case-using-qtest","title":"How to run a test case using qTest","text":""},{"location":"qa/manual/qtest-training-session/#how-to-update-a-passed-test-case","title":"How to update a passed test case","text":""},{"location":"qa/manual/qtest-training-session/#how-to-update-a-failed-test-case","title":"How to update a failed test case","text":""},{"location":"qa/manual/qtest-training-session/#how-to-create-a-defect","title":"How to create a defect","text":""},{"location":"qa/manual/qtest-training-session/#how-to-update-the-status-in-jira","title":"How to update the status in Jira","text":""},{"location":"qa/manual/qtest-training-session/#how-to-reassign-a-test-case","title":"How to reassign a test case","text":""},{"location":"qa/manual/qtest-training-session/#qtest-training-video-for-test-case-developers","title":"qTest Training Video - For Test Case Developers","text":"<p>The installation and usage of qTest can be seen also in the following video.</p> <p>Click here if you are unable to see the video.</p>"},{"location":"qa/projects/nextgen/","title":"NextGen Project","text":"<p>This is a temporery site for NextGen ERP QA and Test reletaed topcis. </p>"},{"location":"qa/projects/nextgen/#test-strategy","title":"Test Strategy:","text":"<p> Dette er et innebygd Microsoft Office-dokument. Leveres av Office. <p></p>"},{"location":"qa/projects/nextgen/#test-phases","title":"Test Phases","text":"Unit Testing (UT) Functional Testing (FT) System Integration Testing (SIT) User Acceptance Testing (UAT) Testing Phase Development Development Release Release System D09 (Client 390) Q09 (client 590) Q09 (client 490) T09 (client 590) Test Methods Automated code testing (TDD with ABAP Unit) code review Automated regression testing;Exploratory testing Functional Testing Non-functional Testing (performance, usability, reliability, authorization, et)Functional Testing Non-functional Testing (performance, usability, reliability, authorization, et)Functional Testing Ways of testing - - Bottom-up Beta testing Definition of \"Done\" list of criteria that ensures the functional need is coveredTechnical DoD PO or SME test approval SME &amp; Lead users test approval End users test approval Who Developersfunctional specialists functional Specialists Functional SpecialistsQA SMEs (automated testing)Selected key users (SIT2) Key UsersEnd usersQA SMEs (automated testing) Expected Automation Level 0% 0%\"in sprint\" automated regression testing executed on top of manual tests Up to 30% Up to 50% Entry Criteria Define MVP test approach (Release/EPICs/User Stories)  Define Test Strategy &amp; Approach  Define Test Automation Strategy  Resource planning  Setup of Test Suite and Tosca  Users Enablement for Test Suite &amp; Tosca  Provide test case template and test case naming convention Same as UT Provide test plan (testing timeline, test case templates, defect resolution process, defect prioritization, define SLAs, etc.)  Test community for IT is confirmed   Ensure test tool access   Prepare tool setup, e.g. tester assignment, test plan creation  Conduct tester trainings   Collect and upload test cases (approved by validation team)  All required data loaded (Mock 1 completed)  Prepare system enablement (e.g. automatic regression testing)  Authorisation model ready, roles assigned to SIT2 testers Provide test plan (testing timeline, test case templates, defect resolution process, defect prioritization, define SLAs, etc.)  Test community for UAT is confirmed   Ensure test tool access   Prepare tool setup, e.g. tester assignment, test plan creation  Conduct tester trainings   Collect and upload test cases (approved by validation team)  All required data loaded (Mock 2 completed)  Prepare system enablement (e.g. automatic regression testing) Exit Criteria Ensure that the Business Requirements are implemented for Sprint scope (EPICs/US) \u2013 Product Owner sign-offs received  Test data required for testing prepared (manual creation)  Test scenarios &amp; test cases created  Unit tests &amp; functional tests successfully completed  Defect management process steps executed  Automation priorities agreed  Evidence of FT created  Exploratory testing documentation delivered  End-to-end integration test cases created (if neccessary/possible) Same as UT End-to-End Integration test successfully completed with expected completion results (as per Statement of Work)  TBD* % of very high defects resolved (focus on critical test cases) for SIT1 &amp; SIT2 respectively  Product Owners &amp; Process Area Leads sign-offs received  Authorization roles tested (SIT2 only, incl. negative testing)  Data validation done  Bug fixing phase finalized User Acceptance Test successfully completed with expected results (as per Statement of Work)  No critcal or very high defects remainig  Solution Owner, Product Owners &amp; Process Area Leads sign-offs on UAT results received  Authorization roles tested (incl. negative testing)  Data validation done  Finalize the UAT and ticket resolution phase  Transfer remaining tickets for hypercare  Communicate the UAT completion status for deployment preparation  Bug fixing phase finalized"},{"location":"qa/projects/project-overview/","title":"Projects","text":"<p>The following projects are affected by these guidelines.</p> <p> <p></p> <p></p>"}]}